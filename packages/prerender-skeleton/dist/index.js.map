{"version":3,"sources":["../src/index.ts","../src/core/generate.ts"],"sourcesContent":["import { generatePrerenderHtml } from \"./core/generate\";\nimport { PrerenderSkeletonOption} from \"./types/index\"\nimport type { Plugin } from \"vite\";\n\nimport Render from \"@prerenderer/renderer-puppeteer\";\nexport default function PrerenderSkeleton(\n  options: PrerenderSkeletonOption\n): Plugin{\n  return {\n    name:\"rollup-plugin-prerender-skeleton\",\n    apply: 'build',\n    enforce: 'post',\n    async closeBundle() {\n        await generatePrerenderHtml(options)\n      },\n  };\n}\nPrerenderSkeleton.Render=Render\n\n","import fs from \"fs\";\nimport path from \"path\";\nimport * as mkdirp from \"mkdirp\";\nimport Prerenderer from \"@prerenderer/prerenderer\";\n// Make sure you install a renderer as well!\nimport { PrerenderSkeletonOption} from \"../types/index\"\n\n\nexport const generatePrerenderHtml = (options:PrerenderSkeletonOption) => {\n  const prerenderer = new Prerenderer(options);\n  prerenderer\n    .initialize()\n    .then(() => {\n      // List of routes to render.\n      const routes=options.routes.map(item=>item.path)\n      return prerenderer.renderRoutes(routes);\n    })\n    .then((renderedRoutes) => {\n      // renderedRoutes is an array of objects in the format:\n      // {\n      //   route: String (The route rendered)\n      //   html: String (The resulting HTML)\n      // }\n      renderedRoutes.forEach((renderedRoute) => {\n        try {\n          // A smarter implementation would be required, but this does okay for an example.\n          // Don't copy this directly!!!\n          const outputDir = path.join(options.staticDir,renderedRoute.route);\n          const outputFile = `${outputDir}/index.html`;\n\n          mkdirp.sync(outputDir);\n          fs.writeFileSync(outputFile, renderedRoute.html.trim());\n        } catch (e) {\n          console.log(\"error\",e)\n          // Handle errors.\n        }\n      });\n\n      // Shut down the file server and renderer.\n      return prerenderer.destroy();\n    })\n    .catch((err) => {\n      console.log(err.message,err.stack)\n      \n      // Shut down the server and renderer.\n      return prerenderer.destroy();\n      // Handle errors.\n    });\n};\n// Initialize is separate from the constructor for flexibility of integration with build systems.\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,gBAAe;AACf,kBAAiB;AACjB,aAAwB;AACxB,yBAAwB;AAKjB,IAAM,wBAAwB,CAAC,YAAoC;AACxE,QAAM,cAAc,IAAI,mBAAAA,QAAY,OAAO;AAC3C,cACG,WAAW,EACX,KAAK,MAAM;AAEV,UAAM,SAAO,QAAQ,OAAO,IAAI,UAAM,KAAK,IAAI;AAC/C,WAAO,YAAY,aAAa,MAAM;AAAA,EACxC,CAAC,EACA,KAAK,CAAC,mBAAmB;AAMxB,mBAAe,QAAQ,CAAC,kBAAkB;AACxC,UAAI;AAGF,cAAM,YAAY,YAAAC,QAAK,KAAK,QAAQ,WAAU,cAAc,KAAK;AACjE,cAAM,aAAa,GAAG,SAAS;AAE/B,QAAO,YAAK,SAAS;AACrB,kBAAAC,QAAG,cAAc,YAAY,cAAc,KAAK,KAAK,CAAC;AAAA,MACxD,SAAS,GAAG;AACV,gBAAQ,IAAI,SAAQ,CAAC;AAAA,MAEvB;AAAA,IACF,CAAC;AAGD,WAAO,YAAY,QAAQ;AAAA,EAC7B,CAAC,EACA,MAAM,CAAC,QAAQ;AACd,YAAQ,IAAI,IAAI,SAAQ,IAAI,KAAK;AAGjC,WAAO,YAAY,QAAQ;AAAA,EAE7B,CAAC;AACL;;;AD5CA,gCAAmB;AACJ,SAAR,kBACL,SACO;AACP,SAAO;AAAA,IACL,MAAK;AAAA,IACL,OAAO;AAAA,IACP,SAAS;AAAA,IACH,cAAc;AAAA;AAChB,cAAM,sBAAsB,OAAO;AAAA,MACrC;AAAA;AAAA,EACJ;AACF;AACA,kBAAkB,SAAO,0BAAAC;","names":["Prerenderer","path","fs","Render"]}