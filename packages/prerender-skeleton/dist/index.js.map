{"version":3,"sources":["../src/index.ts","../src/core/generate.ts","../src/core/render/renderer.ts","../src/core/render/options.ts","../src/core/render/waitForRender.ts","../src/core/render/index.ts"],"sourcesContent":["import { generatePrerenderHtml } from \"./core/generate\";\nimport { PrerenderSkeletonOption} from \"./types/index\"\nimport type { Plugin } from \"vite\";\n\nimport Render from \"./core/render/index\";\nexport default function PrerenderSkeleton(\n  options: PrerenderSkeletonOption\n): Plugin{\n  return {\n    name:\"rollup-plugin-prerender-skeleton\",\n    apply: 'build',\n    enforce: 'post',\n    async closeBundle() {\n        await generatePrerenderHtml(options)\n      },\n  };\n}\nPrerenderSkeleton.Render=Render\n\n","import fs from \"fs\";\nimport path from \"path\";\nimport * as mkdirp from \"mkdirp\";\nimport Prerenderer from \"@prerenderer/prerenderer\";\n// Make sure you install a renderer as well!\nimport { PrerenderSkeletonOption} from \"../types/index\"\n\n\nexport const generatePrerenderHtml = (options:PrerenderSkeletonOption) => {\n  const prerenderer = new Prerenderer(options);\n  prerenderer\n    .initialize()\n    .then(() => {\n      // List of routes to render.\n      const routes=options.routes.map(item=>item.path)\n      return prerenderer.renderRoutes(routes);\n    })\n    .then((renderedRoutes) => {\n      // renderedRoutes is an array of objects in the format:\n      // {\n      //   route: String (The route rendered)\n      //   html: String (The resulting HTML)\n      // }\n      renderedRoutes.forEach((renderedRoute) => {\n        try {\n          // A smarter implementation would be required, but this does okay for an example.\n          // Don't copy this directly!!!\n          const outputDir = path.join(options.staticDir,renderedRoute.route);\n          const outputFile = `${outputDir}/index.html`;\n\n          mkdirp.sync(outputDir);\n          fs.writeFileSync(outputFile, renderedRoute.html.trim());\n        } catch (e) {\n          console.log(\"error\",e)\n          // Handle errors.\n        }\n      });\n\n      // Shut down the file server and renderer.\n      return prerenderer.destroy();\n    })\n    .catch((err) => {\n      console.log(err.message,err.stack)\n      \n      // Shut down the server and renderer.\n      return prerenderer.destroy();\n      // Handle errors.\n    });\n};\n// Initialize is separate from the constructor for flexibility of integration with build systems.\n","import Prerenderer, { IRenderer, RenderedRoute } from '@prerenderer/prerenderer'\n\nimport promiseLimit from 'promise-limit'\nimport puppeteer, { Browser, Page } from 'puppeteer'\nimport { PuppeteerRendererFinalOptions, PuppeteerRendererOptions, schema, defaultOptions } from './options'\nimport { waitForRender, listenForRender } from './waitForRender'\nimport { validate } from 'schema-utils'\nimport {merge as deepMerge} from 'ts-deepmerge'\n\nexport default class PuppeteerRenderer implements IRenderer {\n  private puppeteer!: Browser \n  private readonly options: PuppeteerRendererFinalOptions\n\n  constructor (options: PuppeteerRendererOptions = {}) {\n    validate(schema, options, {\n      name: 'Renderer Puppeteer',\n      baseDataPath: 'options',\n    })\n    \n    this.options = deepMerge(defaultOptions, options) as PuppeteerRendererFinalOptions\n\n    if (options.renderAfterTime && this.options.timeout < options.renderAfterTime) {\n      this.options.timeout = options.renderAfterTime + 1000\n    }\n  }\n\n  async initialize () {\n    // Workaround for Linux SUID Sandbox issues.\n    if (process.platform === 'linux') {\n      if (!this.options.args) this.options.args = []\n\n      if (this.options.args.indexOf('--no-sandbox') === -1) {\n        this.options.args.push('--no-sandbox')\n        this.options.args.push('--disable-setuid-sandbox')\n      }\n    }\n\n    // Puppeteer tends to stay alive if the program exits unexpectedly, try to handle this and cleanup\n    const cleanup = () => void this.destroy()\n    process.on('SIGTERM', cleanup)\n    process.on('SIGINT', cleanup)\n\n    process.on('uncaughtException', cleanup)\n\n    // Previously the whole option object was passed to `launch` which was not the best idea\n    // We do a bit of backward compatibility here\n    // TODO use an explicit list of legacyOptions rather than excluding the list of existing options\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const {\n      maxConcurrentRoutes,\n      inject,\n      injectProperty,\n      timeout,\n      args,\n      headless,\n      pageSetup,\n      pageHandler,\n      consoleHandler,\n      viewport,\n      navigationOptions,\n      launchOptions,\n      renderAfterTime,\n      renderAfterElementExists,\n      elementHidden,\n      elementVisible,\n      skipThirdPartyRequests,\n      renderAfterDocumentEvent,\n      ...legacyOptions\n    } = this.options\n    /* eslint-enable */\n    if (!launchOptions) {\n      if (Object.keys(legacyOptions).length > 1) {\n        console.warn('You are passing options to puppeteer launch using root options, which has been deprecated put them in \"launchOptions\" instead [Affected: ' + Object.keys(legacyOptions).join(',') + ']')\n      }\n    }\n    this.puppeteer = await puppeteer.launch({ headless: headless ? 'new' : false, args, ...(launchOptions || legacyOptions) })\n  }\n\n  async handleRequestInterception (page: Page, baseURL: string) {\n    await page.setRequestInterception(true)\n\n    page.on('request', (req) => {\n      // Skip third party requests if needed.\n      if (this.options.skipThirdPartyRequests) {\n        if (!req.url().startsWith(baseURL)) {\n          void req.abort()\n          return\n        }\n      }\n\n      void req.continue()\n    })\n  }\n\n  renderRoutes (routes: Array<string>, prerenderer: Prerenderer) {\n    const rootOptions = prerenderer.getOptions()\n\n    const baseURL = `http://${rootOptions.server.host}:${rootOptions.server.port}`\n\n    const limiter = promiseLimit<RenderedRoute>(this.options.maxConcurrentRoutes)\n\n    return Promise.all(\n      routes.map(\n        (route) => limiter(() => this.getPageContent(baseURL, route)),\n      ),\n    )\n  }\n\n  private async getPageContent (baseURL: string, route: string) {\n    const options = this.options\n    const page = await this.puppeteer.newPage()\n    try {\n      if (options.consoleHandler) {\n        const handler = options.consoleHandler\n        page.on('console', message => handler(route, message))\n      }\n\n      if (options.inject) {\n        await page.evaluateOnNewDocument(`(function () { window['${options.injectProperty}'] = ${JSON.stringify(options.inject)}; })();`)\n      }\n\n      // Allow setting viewport widths and such.\n      if (options.viewport) await page.setViewport(options.viewport)\n\n      await this.handleRequestInterception(page, baseURL)\n\n      options.pageSetup && await options.pageSetup(page, route)\n\n      // Hack just in-case the document event fires before our main listener is added.\n      if (options.renderAfterDocumentEvent) {\n        await page.evaluateOnNewDocument(listenForRender, options)\n      }\n\n      const navigationOptions = {\n        waituntil: 'networkidle0',\n        timeout: options.timeout,\n        ...options.navigationOptions,\n      }\n      await page.goto(`${baseURL}${route}`, navigationOptions)\n\n      options.pageHandler && await options.pageHandler(page, route)\n\n      const prs: Array<Promise<void | string>> = []\n      // Wait for some specific element exists\n      if (options.renderAfterElementExists) {\n        const elem = options.renderAfterElementExists\n        prs.push((async () => {\n          try {\n            await page.waitForSelector(elem, {\n              timeout: options.timeout,\n              hidden: options.elementHidden,\n              visible: options.elementVisible,\n            })\n          } catch (e) {\n            await page.close()\n            const timeS = Math.round(options.timeout / 100) / 10\n            throw new Error(`Could not prerender: element '${elem}' did not appear within ${timeS}s`)\n          }\n        })())\n      }\n\n      prs.push(page.evaluate(waitForRender, options))\n\n      const res = await Promise.race(prs)\n      if (res) {\n        throw new Error(res)\n      }\n\n      const result: RenderedRoute = {\n        originalRoute: route,\n        route: await page.evaluate('window.location.pathname') as string,\n        html: await page.content(),\n      }\n      return result\n    } finally {\n      await page.close()\n    }\n  }\n\n  async destroy () {\n    if (this.puppeteer) {\n      await this.puppeteer.close()\n    }\n  }\n}","import { ConsoleMessage, Page, Viewport, WaitForOptions } from 'puppeteer'\nimport { JSONSchemaType } from 'ajv'\nimport { Schema } from 'schema-utils/declarations/validate'\n\nexport interface PuppeteerRendererOptions {\n  maxConcurrentRoutes?: number\n  renderAfterDocumentEvent?: string\n  renderAfterElementExists?: string\n  renderAfterTime?: number\n  timeout?: number\n  inject?: unknown\n  injectProperty?: string\n  skipThirdPartyRequests?: boolean\n  headless?: boolean\n  args?: string[]\n\n  pageSetup?: (page: Page, route: string) => void | Promise<void>\n  pageHandler?: (page: Page, route: string) => void | Promise<void>\n\n  consoleHandler?: (route: string, message: ConsoleMessage) => void\n\n  viewport?: Viewport\n  launchOptions?: any\n  navigationOptions?: WaitForOptions\n\n  elementVisible?: boolean\n  elementHidden?: boolean\n}\n\nexport const defaultOptions = {\n  headless: true,\n  injectProperty: '__PRERENDER_INJECTED',\n  maxConcurrentRoutes: 0,\n  timeout: 1000 * 30, // 30 sec timeout by default\n}\n\nexport type PuppeteerRendererFinalOptions = PuppeteerRendererOptions & typeof defaultOptions\n\nexport const schema: JSONSchemaType<Omit<PuppeteerRendererOptions, 'inject' | 'pageHandler' | 'pageSetup' | 'consoleHandler' | 'navigationOptions'>>\n  & Schema = {\n    type: 'object',\n    additionalProperties: true,\n    properties: {\n      launchOptions: {\n        type: 'object',\n        additionalProperties: true,\n        nullable: true,\n      },\n      headless: {\n        type: 'boolean',\n        description: 'Set to true if you want to the browser to open when rendering',\n        nullable: true,\n      },\n      maxConcurrentRoutes: {\n        type: 'number',\n        nullable: true,\n      },\n      renderAfterDocumentEvent: {\n        type: 'string',\n        description: 'The name of the event that should trigger the rendering of the page',\n        nullable: true,\n      },\n      renderAfterElementExists: {\n        type: 'string',\n        description: 'Wait until this selector is found on the page',\n        nullable: true,\n      },\n      elementVisible: {\n        type: 'boolean',\n        nullable: true,\n        description: 'If this is true, the renderAfterElementExists must be visible on the page to trigger the render',\n      },\n      elementHidden: {\n        type: 'boolean',\n        nullable: true,\n        description: 'If this is false, the renderAfterElementExists must be hidden on the page to trigger the render',\n      },\n      renderAfterTime: {\n        type: 'number',\n        description: 'Time to wait for in ms before rendering the page',\n        nullable: true,\n      },\n      timeout: {\n        type: 'number',\n        description: 'The time in ms after which we should stop waiting and throw an error',\n        nullable: true,\n      },\n      injectProperty: {\n        type: 'string',\n        description: 'The key of the injected value into window',\n        nullable: true,\n      },\n      args: {\n        type: 'array',\n        description: 'List of CLI arguments to launch puppeteer with',\n        items: {\n          type: 'string',\n        },\n        nullable: true,\n      },\n      pageHandler: {\n        instanceOf: 'Function',\n        description: 'A custom handler to use the puppeteer api when opening the page',\n      },\n      pageSetup: {\n        instanceOf: 'Function',\n        description: 'A custom handler that can be used to register interceptors on the page',\n      },\n      skipThirdPartyRequests: {\n        type: 'boolean',\n        description: 'Setting this option to true will ignore all requests to external urls',\n        nullable: true,\n      },\n      consoleHandler: {\n        instanceOf: 'Function',\n        description: 'A custom handler for console messages happening on the page',\n      },\n      viewport: {\n        type: 'object',\n        additionalProperties: true, // If ever options are added\n        required: ['height', 'width'],\n        nullable: true,\n        properties: {\n          width: {\n            type: 'number',\n            description: 'The page width in pixels.',\n          },\n          height: {\n            type: 'number',\n            description: 'The page height in pixels.',\n          },\n          deviceScaleFactor: {\n            type: 'number',\n            description: 'Specify device scale factor. See https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio for more info.',\n            nullable: true,\n          },\n          isMobile: {\n            type: 'boolean',\n            description: 'Whether the `meta viewport` tag is taken into account.',\n            nullable: true,\n          },\n          isLandscape: {\n            type: 'boolean',\n            description: 'Specifies if the viewport is in landscape mode.',\n            nullable: true,\n          },\n          hasTouch: {\n            type: 'boolean',\n            description: 'Specify if the viewport supports touch events.',\n            nullable: true,\n          },\n        },\n      },\n      navigationOptions: {\n        type: 'object',\n        nullable: true,\n        properties: {\n          timeout: {\n            type: 'number',\n            nullable: true,\n          },\n          waitUntil: {\n            type: 'null',\n            nullable: true,\n            anyOf: [\n              {\n                type: 'string',\n                enum: ['load', 'domcontentloaded', 'networkidle0', 'networkidle2'],\n              },\n              {\n                type: 'array',\n                items: {\n                  type: 'string',\n                  enum: ['load', 'domcontentloaded', 'networkidle0', 'networkidle2'],\n                },\n              },\n            ],\n          },\n        },\n      },\n    },\n  }","import { PuppeteerRendererFinalOptions } from './options'\n\ndeclare global {\n  interface Window {\n    __PRERENDER_STATUS?: {\n      _DOCUMENT_EVENT_RESOLVED?: boolean\n    };\n  }\n}\n\nexport const listenForRender = (options: PuppeteerRendererFinalOptions) => {\n  if (options.renderAfterDocumentEvent) {\n    window.__PRERENDER_STATUS = {}\n    document.addEventListener(options.renderAfterDocumentEvent, () => {\n      window.__PRERENDER_STATUS = window.__PRERENDER_STATUS || {}\n      window.__PRERENDER_STATUS._DOCUMENT_EVENT_RESOLVED = true\n    })\n  }\n}\n\nexport const waitForRender = (options: PuppeteerRendererFinalOptions) => {\n  const timeout = options.timeout\n  const event = options.renderAfterDocumentEvent\n\n  return new Promise<void | string>((resolve) => {\n    let fallback = true\n    // Render when an event fires on the document.\n    if (event) {\n      fallback = false\n      let tim: NodeJS.Timeout | null = null\n      if (timeout) {\n        tim = setTimeout(() => {\n          const timeS = Math.round(timeout / 100) / 10\n          // We don't use reject, because puppeteer wraps the error in it's own error message\n          resolve(`Could not prerender: event '${event}' did not occur within ${timeS}s`)\n        }, timeout)\n      }\n\n      if (window.__PRERENDER_STATUS && window.__PRERENDER_STATUS._DOCUMENT_EVENT_RESOLVED) {\n        resolve()\n      }\n      document.addEventListener(event, () => {\n        tim && clearTimeout(tim)\n        resolve()\n      })\n    }\n    if (options.renderAfterElementExists) {\n      fallback = false // Don't resolve because we are in Promise.race\n    }\n    // Render after a certain number of milliseconds.\n    if (options.renderAfterTime) {\n      fallback = false\n      setTimeout(() => resolve(), options.renderAfterTime)\n    }\n\n    // Default: Render immediately after page content loads.\n    if (fallback) {\n      resolve()\n    }\n  })\n}","import PuppeteerRenderer from './renderer'\nimport { PuppeteerRendererOptions } from './options'\n\nexport type { PuppeteerRenderer, PuppeteerRendererOptions }\nexport default PuppeteerRenderer"],"mappings":"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","names":["Prerenderer","path","fs","deepMerge","puppeteer","promiseLimit"]}